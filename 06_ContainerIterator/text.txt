Container:

Unterschied von std::array, std::Vector

std::vector Vorteil, insertion und depletion. ( einfuegen und entfernen)
std::array dort nicht!


Vector: Ein Container der ja unter der Haube ein dynamisches Array, was man dynamisch erweitern kann
    sowie der automatisch speicher auf Heap reserviert. sodass man das nicht manuell machen muss.

Strings: Koennte man auch noch zu den Containern hinzuzaehlen, sind ja prinzipell Zeichenketten.

Moechte ich an meinen Datensatz etwas anfügen, einfügen oder entfernen, dann gibt es bessere Methoden als
    Vectoren. Andere Container!

Std::Array klassen gibt es z.b., dass ist NICHT ein C-style Array.

doubly-linked list:
    Wenn man Anforderungen hat öfters Elemente zu entfernen oder anzufügen etc, nimmt man am besten eine Liste!
    hier werden Daten anders abgespeichert sodass sie gut ist zum elemente entfernen und anfügen, ABER langsame Laufzeiten
    wenn man auf Daten zugreifen moechte.

Associative container:

set:


map:

Klassen und Objekte:

Klassen sind sowas wie std::vector std::list

Klassen können Variablen haben diese nennen sich dann  Attribute oder Membervariablen.
Klassen können auch FUnktionen haben, diese nennen sich Methoden, das sind Funktionen innerhalb einer Klasse.
    Objekte sind dann die wirklich erstellten Variablen einer Klasse, z.B. my_vector wäre ein Objekt dieser Klasse

Eine Klasse bildet einen Namespace
Erstellung eines Objektes der Klasse mit dem Konstruktor
Zerstörung eines Objektes der Klasse mit dem Destruktors

Objekte sind es dann wenn man eine variable von dieser klasse erstellt
